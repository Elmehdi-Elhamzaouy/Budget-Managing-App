import 'dart:typed_data';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:intl/intl.dart';

class PdfService {
  static Future<pw.Document> generatePdfDocument({
    required double totalBalance,
    required double totalIncome,
    required double totalExpenses,
    required List<Map<String, dynamic>> transactions,
    required List<Map<String, dynamic>> categories,
    required Uint8List pieChartImage,
  }) async {
    final pdf = pw.Document();

    // Define consistent styles
    final headerStyle = pw.TextStyle(
      fontSize: 24,
      fontWeight: pw.FontWeight.bold,
      color: PdfColors.blue900,
    );

    pdf.addPage(
      pw.MultiPage(
        pageTheme: pw.PageTheme(
          theme: pw.ThemeData.withFont(
            base: pw.Font.helvetica(),
            bold: pw.Font.helveticaBold(),
          ),
          pageFormat: PdfPageFormat.a4,
          margin: const pw.EdgeInsets.all(32),
        ),
        header:
            (context) => pw.Container(
              decoration: pw.BoxDecoration(
                border: pw.Border(
                  bottom: pw.BorderSide(color: PdfColors.grey300),
                ),
              ),
              padding: const pw.EdgeInsets.only(bottom: 8),
              margin: const pw.EdgeInsets.only(bottom: 20),
              child: pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Text('Budget Manager Report', style: headerStyle),
                  pw.Container(
                    padding: const pw.EdgeInsets.all(8),
                    decoration: pw.BoxDecoration(
                      color: PdfColors.blue50,
                      borderRadius: pw.BorderRadius.circular(4),
                    ),
                    child: pw.Text(
                      DateFormat.yMMMMd().format(DateTime.now()),
                      style: pw.TextStyle(color: PdfColors.blue900),
                    ),
                  ),
                ],
              ),
            ),
        build:
            (context) => [
              _buildFinancialSummary(totalBalance, totalIncome, totalExpenses),
              pw.SizedBox(height: 30),
              _buildExpenseDistribution(pieChartImage),
              pw.SizedBox(height: 30),
              _buildRecentTransactions(transactions, categories),
            ],
        footer:
            (context) => pw.Container(
              decoration: pw.BoxDecoration(
                border: pw.Border(top: pw.BorderSide(color: PdfColors.grey300)),
              ),
              padding: const pw.EdgeInsets.only(top: 8),
              margin: const pw.EdgeInsets.only(top: 20),
              child: pw.Row(
                mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
                children: [
                  pw.Text(
                    'Generated by Budget Manager App',
                    style: pw.TextStyle(color: PdfColors.grey600, fontSize: 10),
                  ),
                  pw.Text(
                    'Page ${context.pageNumber} of ${context.pagesCount}',
                    style: pw.TextStyle(color: PdfColors.grey600, fontSize: 10),
                  ),
                ],
              ),
            ),
      ),
    );

    return pdf;
  }

  static pw.Widget _buildFinancialSummary(
    double balance,
    double income,
    double expenses,
  ) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(16),
      decoration: pw.BoxDecoration(
        color: PdfColors.blue50,
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Financial Summary',
            style: pw.TextStyle(
              fontSize: 20,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.blue900,
            ),
          ),
          pw.SizedBox(height: 16),
          pw.Row(
            children: [
              _buildPdfSummaryItem('Balance', balance, PdfColors.blue700),
              pw.SizedBox(width: 16),
              _buildPdfSummaryItem('Income', income, PdfColors.green700),
              pw.SizedBox(width: 16),
              _buildPdfSummaryItem('Expenses', expenses, PdfColors.red700),
            ],
          ),
        ],
      ),
    );
  }

  static pw.Widget _buildExpenseDistribution(Uint8List image) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(16),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey300),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Expense Distribution',
            style: pw.TextStyle(
              fontSize: 20,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.blue900,
            ),
          ),
          pw.SizedBox(height: 16),
          if (image.isNotEmpty)
            pw.Center(
              child: pw.ClipRRect(
                horizontalRadius: 8,
                verticalRadius: 8,
                child: pw.Image(
                  pw.MemoryImage(image),
                  width: 400,
                  height: 250,
                  fit: pw.BoxFit.contain,
                ),
              ),
            ),
        ],
      ),
    );
  }

  static pw.Widget _buildRecentTransactions(
    List<Map<String, dynamic>> transactions,
    List<Map<String, dynamic>> categories,
  ) {
    return pw.Container(
      padding: const pw.EdgeInsets.all(16),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.grey300),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'Recent Transactions',
            style: pw.TextStyle(
              fontSize: 20,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.blue900,
            ),
          ),
          pw.SizedBox(height: 16),
          pw.Table(
            border: pw.TableBorder.all(color: PdfColors.grey300, width: 0.5),
            children: [
              pw.TableRow(
                decoration: pw.BoxDecoration(color: PdfColors.blue700),
                children: [
                  _buildPdfHeaderCell('Amount'),
                  _buildPdfHeaderCell('Category'),
                  _buildPdfHeaderCell('Date'),
                  _buildPdfHeaderCell('Type'),
                ],
              ),
              ...transactions.take(10).map((transaction) {
                final category = categories.firstWhere(
                  (c) => c['id'] == transaction['category_id'],
                  orElse: () => {'name': 'Unknown'},
                );
                final isIncome = transaction['type'] == 'income';
                return pw.TableRow(
                  decoration: pw.BoxDecoration(
                    color: isIncome ? PdfColors.green50 : PdfColors.red50,
                  ),
                  children: [
                    _buildPdfCell(
                      '\$${transaction['amount'].toStringAsFixed(2)}',
                      color: isIncome ? PdfColors.green900 : PdfColors.red900,
                    ),
                    _buildPdfCell(category['name']),
                    _buildPdfCell(
                      DateFormat.yMd().format(
                        DateTime.parse(transaction['date']),
                      ),
                    ),
                    _buildPdfCell(
                      transaction['type'].toUpperCase(),
                      color: isIncome ? PdfColors.green900 : PdfColors.red900,
                    ),
                  ],
                );
              }),
            ],
          ),
        ],
      ),
    );
  }

  static pw.Widget _buildPdfSummaryItem(
    String title,
    double amount,
    PdfColor color,
  ) {
    return pw.Expanded(
      child: pw.Container(
        padding: const pw.EdgeInsets.all(16),
        decoration: pw.BoxDecoration(
          color: PdfColors.white,
          border: pw.Border.all(color: color.shade(50)),
          borderRadius: pw.BorderRadius.circular(8),
        ),
        child: pw.Column(
          crossAxisAlignment: pw.CrossAxisAlignment.start,
          children: [
            pw.Text(
              title,
              style: pw.TextStyle(
                fontSize: 14,
                color: color,
                fontWeight: pw.FontWeight.bold,
              ),
            ),
            pw.SizedBox(height: 8),
            pw.Text(
              '\$${amount.toStringAsFixed(2)}',
              style: pw.TextStyle(
                fontSize: 20,
                color: color,
                fontWeight: pw.FontWeight.bold,
              ),
            ),
          ],
        ),
      ),
    );
  }

  static pw.Widget _buildPdfHeaderCell(String text) {
    return pw.Padding(
      padding: const pw.EdgeInsets.symmetric(vertical: 12, horizontal: 8),
      child: pw.Text(
        text,
        style: pw.TextStyle(
          fontWeight: pw.FontWeight.bold,
          color: PdfColors.white,
        ),
      ),
    );
  }

  static pw.Widget _buildPdfCell(
    String text, {
    PdfColor color = PdfColors.grey800,
  }) {
    return pw.Padding(
      padding: const pw.EdgeInsets.symmetric(vertical: 12, horizontal: 8),
      child: pw.Text(text, style: pw.TextStyle(color: color)),
    );
  }
}
